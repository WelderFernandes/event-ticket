// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  maxTickets  Int?
  price       Decimal?
  isActive    Boolean  @default(true)
  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  participants Participant[]
  tickets      Ticket[]

  @@map("events")
}

model Participant {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  @@unique([email, eventId])
  @@map("participants")
}

model Ticket {
  id            String       @id @default(cuid())
  ticketNumber  String       @unique
  qrCode        String       @unique
  status        TicketStatus @default(ACTIVE)
  usedAt        DateTime?
  participantId String
  eventId       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relacionamentos
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
}

enum STATUS {
  Ativo
  Inativo
}

enum ROLES {
  USER
  ADMIN
  SORTEADOR
}

model User {
  id                    String    @id
  email                 String
  nome                  String
  cpf                   String
  matricula             Int
  data_nascimento       DateTime?
  codigo_contrato       Int?
  contrato              String?
  codigo_secretaria     String?
  secretaria            String?
  codigo_local_trabalho Int?
  local_trabalho        String
  quadro                String?
  role                  ROLES     @default(USER)
  status                STATUS    @default(Ativo)
  emailVerified         Boolean   @default(false)
  image                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  sessions              Session[]
  accounts              Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
